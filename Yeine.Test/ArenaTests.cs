using System;
using Xunit;
using Yeine.API;
using Yeine.Arena;
using Yeine.State;

namespace Yeine.Test
{
    public class ArenaTests
    {
        private class Repeat : IStrategy
        {
            private readonly Move move;
            public Repeat(Move move) => this.move = move;
            public Move Act(Game state, Action<string> report) => move;
        }

        [Fact]
        public void InitState()
        {
            var field = new Field(18, 16, ".,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,0,.,.,.,.,0,0,.,.,.,.,.,.,0,0,.,.,0,.,0,.,0,0,.,.,0,.,0,0,.,.,.,.,.,0,.,.,0,.,.,.,.,.,.,.,0,.,.,.,0,0,.,.,.,0,0,0,.,.,.,.,0,0,.,.,0,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,0,.,0,.,.,.,.,0,0,.,.,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.,.,1,1,.,.,.,.,1,.,1,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,1,.,.,1,1,.,.,.,.,1,1,1,.,.,.,1,1,.,.,.,1,.,.,.,.,.,.,.,1,.,.,1,.,.,.,.,.,1,1,.,1,.,.,1,1,.,1,.,1,.,.,1,1,.,.,.,.,.,.,1,1,.,.,.,.,1,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.");
            var match = new Match(0, field, 
                new Repeat(Move.Birth(new Point(6,7), new Point(3,0), new Point(9,0))), 
                new Repeat(Move.Pass())); 

            Assert.Equal('0', match.S0.OurID);
            Assert.Equal('1', match.S1.OurID);
        }

        [Fact]
        public void FirstTurn()
        {
            var field = new Field(18, 16, ".,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,0,.,.,.,.,0,0,.,.,.,.,.,.,0,0,.,.,0,.,0,.,0,0,.,.,0,.,0,0,.,.,.,.,.,0,.,.,0,.,.,.,.,.,.,.,0,.,.,.,0,0,.,.,.,0,0,0,.,.,.,.,0,0,.,.,0,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,0,.,0,.,.,.,.,0,0,.,.,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.,.,1,1,.,.,.,.,1,.,1,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,1,.,.,1,1,.,.,.,.,1,1,1,.,.,.,1,1,.,.,.,1,.,.,.,.,.,.,.,1,.,.,1,.,.,.,.,.,1,1,.,1,.,.,1,1,.,1,.,1,.,.,1,1,.,.,.,.,.,.,1,1,.,.,.,.,1,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.");
            var match = new Match(0, field, 
                new Repeat(Move.Birth(new Point(6,7), new Point(3,0), new Point(9,0))), 
                new Repeat(Move.Pass())); 

            
            match.PlayTurn();

            Assert.Equal(44, match.Cells0);
            Assert.Equal(41, match.Cells1);
            Assert.Equal(".,0,.,.,.,.,.,.,.,.,.,.,.,0,0,.,.,.,0,.,.,0,0,0,0,.,.,.,.,.,.,0,0,.,.,.,0,0,0,.,0,0,0,.,0,0,0,.,.,.,.,0,.,.,.,.,.,0,.,.,.,0,.,0,.,.,.,.,.,.,.,.,0,.,0,.,.,.,.,.,0,0,0,.,.,.,.,.,.,.,0,.,0,0,.,.,.,.,.,0,0,0,.,.,.,.,.,.,.,.,0,.,.,.,0,0,0,.,.,.,0,.,.,.,.,.,.,0,.,.,.,.,0,0,.,.,.,0,.,0,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,.,.,.,.,.,.,.,.,1,1,1,.,.,.,.,.,1,1,.,1,.,.,.,.,.,.,.,1,1,1,.,.,.,.,.,1,.,1,.,.,.,.,.,.,.,.,1,.,1,.,.,.,1,.,.,.,.,.,1,.,.,.,.,1,1,1,.,1,1,1,.,1,1,1,.,.,.,1,1,.,.,1,1,1,.,1,1,.,.,.,.,1,.,.,.,1,1,.,.,.,.,.,.,.,.,.,.,1,1,.", field.ToString());
        }

        [Fact]
        public void FirstRound()
        {
            var field = new Field(18, 16, ".,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,0,.,.,.,.,0,0,.,.,.,.,.,.,0,0,.,.,0,.,0,.,0,0,.,.,0,.,0,0,.,.,.,.,.,0,.,.,0,.,.,.,.,.,.,.,0,.,.,.,0,0,.,.,.,0,0,0,.,.,.,.,0,0,.,.,0,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,.,.,.,.,.,0,.,0,.,0,.,.,.,.,0,0,.,.,0,0,0,.,.,.,.,.,0,.,.,.,0,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.,.,1,1,.,.,.,.,1,.,1,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,1,.,.,1,1,.,.,.,.,1,1,1,.,.,.,1,1,.,.,.,1,.,.,.,.,.,.,.,1,.,.,1,.,.,.,.,.,1,1,.,1,.,.,1,1,.,1,.,1,.,.,1,1,.,.,.,.,.,.,1,1,.,.,.,.,1,.,.,.,.,1,.,.,.,1,.,.,.,.,.,1,1,1,.");
            var match = new Match(0, field, 
                new Repeat(Move.Birth(new Point(6,7), new Point(3,0), new Point(9,0))), 
                new Repeat(Move.Birth(new Point(6,8), new Point(16,13), new Point(9,13))));

            match.PlayTurn();
            match.PlayTurn();

            Assert.Equal(38, match.Cells0);
            Assert.Equal(34, match.Cells1);
            Assert.Equal(".,.,.,.,0,0,.,.,.,.,.,.,.,0,0,.,.,.,0,.,.,0,.,.,0,0,.,0,.,.,.,0,.,0,.,.,0,0,0,.,.,.,.,.,0,0,0,.,.,.,0,.,.,.,0,.,.,0,0,0,0,0,.,.,.,.,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,.,.,0,.,.,.,.,.,.,.,.,0,0,.,.,.,.,.,.,.,0,.,.,.,.,.,.,.,.,0,0,.,.,0,.,0,0,.,.,0,.,.,.,.,.,.,.,.,.,.,.,.,.,0,.,.,.,0,.,.,.,.,.,.,.,.,.,.,.,1,0,.,.,.,.,.,.,.,.,.,.,.,.,.,.,.,1,.,.,1,.,.,.,.,.,1,1,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,.,1,1,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,1,.,.,.,.,.,.,.,.,.,.,.,.,1,1,1,1,1,1,.,.,.,.,.,1,.,.,.,.,.,.,.,.,.,1,1,.,1,.,.,.,1,.,1,.,.,1,.,1,1,1,.,1,1,1,.,1,.,.,.,1,1,.,.,.,1,.,.,.,.,.,.,.,1,.", field.ToString());
        }
    }
}